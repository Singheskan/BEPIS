from py2neo import Graph, Node, Relationship  # https://py2neo.org/v4/

# from pandas import DataFrame
# import os.path
# from neo4j import GraphDatabase


'''
Fraunhofer Institut fÃ¼r Sichere Informationstechnologie
Author: Patrick Singh
Betreuer: Hervais-Clemence Simo Fhom, Prof. Michael Waidner
'''
'''
BEPIS - Description:
BEPIS is an experimental approach on realizing Epsilon-Differential-Privacy as data anonymization technique for
graph database, e.g. Neo4j. It provides a console interface to a running Neo4j-Graph instance and ways to laod data
into the system, as .csv files. Furthermore, it provides ways to query the database and translates these queries to queries
enforcing epsilon-differential-privacy. As being a prove-of-concept implementation as part of my bachelor thesis,
it only provides first-steps into this topic and is therefore just providing a translation for aggregation queries, like counting queries.
We are implementing the sensitivity-based mechanism with elastic sensitivity as an upper boundary to local sensitivity.
'''
'''
Sending queries to the Neo4j Browser to visualize them is currently not possible:
https://community.neo4j.com/t/py2neo-can-we-see-in-a-client-navigator-the-query-send-by-py2neo/1674/3
https://github.com/neo4j/neo4j-browser/issues/728

-> Queries must be inserted into the Neo4j Browser by hand to visualize them properly.

Loadable CSV-Files: UserData.csv (100 entries), UserData2.csv (most stable, 10.000 entries), adult.csv (~15.000 entries)
'''


class EDPNeo4j:
    # Neo4j Graph Credentials
    uri = "bolt://localhost:11011"  # Neo4j Browser - :server status
    user = "neo4j"
    password = "snsnsn11"

    # Privacy Budget, Epsilon, and sensitivity
    pb = 10
    eps = 0.1
    s = 1

    # DB Metadata
    originDBNodeCount = 0
    originDBRelCount = 0

    try:
        g = Graph(uri=uri, user=user, password=password)
    except ConnectionError:
        print("Check if a (local) instance of Neo4j is up and running, "
              "as well as if the graph address (uri), user and password match")

    # clear the graph
    g.delete_all()

    # Add / uncomment the following line in neo4j.conf: dbms.directories.import=import
    # Insert csv files: (create import folder if missing)
    # in windows: C:\Users\username\.Neo4jDesktop\neo4jDatabases\database-xxxx-xxxx\installation-x.x.x\import
    print("Please insert a csv file into Neo4j's import folder before continuing.")
    csvName = input("Please insert the name of the csv file (format name.csv) or type nothing to use UserData.csv: ")
    if not csvName:  # Empty strings are considered false boolean
        csvName = "UserData.csv"
        csvURL = "\"file:///UserData.csv\""  # csv is in import folder of the neo4j distribution
    else:
        csvURL = "\"file:///" + csvName + "\""
    # print(csvURL)
    print("Before commit")
    print("Nodes: " + str(len(g.nodes)))
    print("Relations: " + str(len(g.relationships)))

    # CSV Files generated with: http://www.convertcsv.com/generate-test-data.htm
    if csvName == "UserData.csv" or csvName == "UserData2.csv":
        csv = g.run("LOAD CSV WITH HEADERS FROM " + csvURL +
                    " AS line CREATE (:Person "
                    "{ name: line.name, gender: line.gender, age: toInteger(line.age), "
                    "city: line.city, income: toFloat(line.income) })")
    # rows: ssn(social-security-number), age, workclass, education, marital-status, occupation, relationship,
    # race, sex, capital-gain, capital-loss, hours-per-week, native-country
    elif csvName == "adult.csv":  # from: https://github.com/VibhaBelavadi/differential-privacy-based-access-control
        csv = g.run("LOAD CSV WITH HEADERS FROM " + csvURL +
                    " AS line CREATE (:Person "
                    "{ ssn: toInteger(line.ssn), age: toInteger(line.age), workclass: line.workclass, "
                    "education: line.education, maritalstatus: line.maritalstatus, occupation: line.occupation, "
                    "race: line.race, sex: line.sex, capitalgain: toInteger(line.capitalgain), "
                    "hoursperweek: toInteger(line.hoursperweek), nativecountry: line.nativecountry})")
    else:
        print("There is no loading scheme specified for this csv file.")

    # Begin a transaction
    tx = g.begin()
    # Interconnect some nodes as "Friends" or "Foes"
    # Only works for UserData.csv and adult.csv
    if csvName == "UserData.csv" or csvName == "UserData2.csv":
        tx.run(
            "MATCH (a: Person), (b: Person) WHERE a.name STARTS WITH 'A' AND b.name STARTS WITH 'B' "
            "CREATE (a)-[r:Friends]->(b)")
        tx.run(
            "MATCH (a: Person), (b: Person) WHERE a.name STARTS WITH 'C' AND b.name STARTS WITH 'D' "
            "CREATE (a)-[r:Foes]->(b)")
    # Increase available RAM in neo4j.conf at Java Heap Size
    if csvName == "adult.csv":
        # tx.run(  # Match everyone who is not living in the USA
        #    "MATCH (a: Person), (b: Person) "
        #    "WHERE a.nativecountry<>'United-States' "
        #    "AND  b.nativecountry<>'United-States' CREATE (a)-[r:NotUSA]->(b)")
        # tx.run(
        #    "MATCH (a: Person), (b: Person) WHERE a.hoursperweek<=10 AND b.hoursperweek<=10 "
        #    "CREATE (a)-[r:minijobbers]->(b)")
        tx.run(
            "MATCH (a: Person), (b: Person) "
            "WHERE a.ssn=818866275 AND b.nativecountry='Cuba' "
            "CREATE (a)-[r:friendsWith]->(b)")

    # Transfer changes to neo4j graph application
    # Once a transaction has been committed or rolled back, it is marked as 'finished' and cannot be reused
    tx.commit()
    print("After commit")
    print("Nodes: " + str(len(g.nodes)))
    print("Relations: " + str(len(g.relationships)))

    # Optional: Further Instructions before querying
    furtherInstr = input("You can enter further instructions before querying, if not necessary, press enter: ")
    if furtherInstr:
        ty = g.begin()
        ty.run(furtherInstr)
        ty.commit()
        print("After further instructions")
        print("Nodes: " + str(len(g.nodes)))
        print("Relations: " + str(len(g.relationships)))

    # Setting DB Metadata for sensitivity calculation
    originDBNodeCount = len(g.nodes)
    originDBRelCount = len(g.relationships)

    # Compute Cypher Query
    userQuery = input("Please insert a Cypher Query: ")
    if userQuery:
        tz = g.begin()
        queryResult = tz.run(userQuery)

        # Only for debugging reasons, should not be included in the "final" version
        print(
            # Once accessed, the cursor is out of the data's array range, hence printing again results in an empty array
            queryResult.data())
        print("NON-EDP Answer")
        print("")
        tz.commit()  # Commit non-edp query

        ta = g.begin()
        queryResult = ta.run(userQuery)  # no commit, only necessary to recreate the queryResult
        # Count non-edp-answer entries for sensitivity
        nonEDPEntryCount = 0
        for record in queryResult:
            nonEDPEntryCount = nonEDPEntryCount + 1

        # Reduce PB
        # querying for unique identifiers is most sensitive and should never result in feasible output
        if "count" in userQuery:
            print("Counting query")
            pb = pb - 1
        else:
            print("Very sensitive")
            pb = 0

        tq = g.begin()  # Start transaction for edp query
        # TODO: Translate Query to EDP Query
        print("Translating Cypher Query to be Epsilon-Differentially-Private")
        # Check if query asks for unique identifying attributes
        if pb == 0:  # Give random response of same size if privacy budget is empty
            edpQuery = tq.run("START t=node(*) return t, rand() as r order by r limit " + str(nonEDPEntryCount)).data()
            print(edpQuery)
            tq.commit()
            # Check if query is a counting query - aggregation function
        if "count" in userQuery:
            orig = g.begin()
            saveOrig = orig.run(userQuery).data().copy()
            print(saveOrig)
            uniform = g.begin()
            countQuery = g.begin()
            print("Apply Sensitivity-Based Mechnism on Counting Query")
        else:
            print("Currently, there are no ways implemented to anonymize this kind of query.")

    else:
        print("No Query was inserted.")
